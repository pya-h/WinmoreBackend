// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums:
enum TokensEnum {
  SOL
  ETH
  USDC
  USDT
  WUSDC
}

enum TransactionStatusEnum {
  SUCCESSFUL
  FAILED
  REVERTED
  PENDING
}

enum TransactionTypeEnum {
  INGAME
  WITHDRAWAL
  DEPOSIT
}

enum BlockStatus {
  latest
  safe
  finalized
}

enum GameStatusEnum {
  WON
  FLAWLESS_WIN
  LOST
  ONGOING
  NOT_STARTED
}

enum GameModesEnum {
  EASY
  MEDIUM
  HARD
}

// Models:
model User {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lastLoginAt DateTime @default(now())

  email            String?         @unique @db.VarChar(256)
  name             String?         @db.VarChar(256)
  admin            Boolean         @default(false)
  wallet           Wallet?
  profile          UserProfile?
  dreamMineRecords DreamMineGame[]
  plinkoGames      PlinkoGame[]
  plinkoBalls      PlinkoBalls[]
  referralChilds   Referral[]      @relation("ReferrerUser")
  referralParents  Referral[]      @relation("RefereeUser")
}

model UserProfile {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user         User    @relation(fields: [userId], references: [id])
  userId       Int     @unique
  avatar       String? @db.VarChar(512)
  referralCode String  @unique
}

model Wallet {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner                User          @relation(fields: [ownerId], references: [id])
  ownerId              Int           @unique
  address              String        @unique @db.VarChar(256)
  withdrawTransactions Transaction[] @relation("TrxSource")
  depositTransactions  Transaction[] @relation("TrxDestination")
}

model Chain {
  id        Int      @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name                String      @db.VarChar(64)
  providerUrl         String      @db.VarChar(256)
  lastProcessedBlock  BigInt?
  blockProcessRange   Int         @default(5)
  acceptedBlockStatus BlockStatus @default(finalized)

  transactions   Transaction[]
  dreamMineGames DreamMineGame[]
  contracts      Contract[]
  blocks         Block[]
  logs           BlockchainLog[]
  plinkoGames    PlinkoGame[]
}

model Contract {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  address  String      @unique @db.VarChar(256)
  token    TokensEnum?
  title    String?     @db.VarChar(128)
  chainId  Int
  chain    Chain       @relation(fields: [chainId], references: [id])
  decimals Int?
}

model Transaction {
  id        BigInt   @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  source        Wallet?               @relation("TrxSource", fields: [sourceId], references: [id])
  sourceId      Int?
  destination   Wallet?               @relation("TrxDestination", fields: [destinationId], references: [id])
  destinationId Int?
  token         TokensEnum            @default(USDC)
  amount        Float
  chainId       Int
  chain         Chain                 @relation(fields: [chainId], references: [id])
  status        TransactionStatusEnum @default(PENDING)
  type          TransactionTypeEnum   @default(INGAME)
  remarks       Json?

  log BlockchainLog?
}

model DreamMineGame {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  initialBet Float
  token      TokensEnum     @default(USDC)
  chainId    Int
  chain      Chain          @relation(fields: [chainId], references: [id])
  mode       GameModesEnum  @default(EASY)
  rowsCount  Int            @default(8)
  currentRow Int            @default(0)
  stake      Float          @default(0.0)
  nulls      Int[]
  lastChoice Int?
  status     GameStatusEnum @default(NOT_STARTED)
  finishedAt DateTime?
}

model DreamMineRules {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  rows                  Int     @unique
  multipliers           Float[] // Stake multiplier, must be > 1
  probabilities         Float[] // in Percentage
  difficultyMultipliers Float[] // easy coefficient is 1 always. This array contains two coefficients [hard, medium] for medium and hard difficulties. (or only hard if only one value)
  // this coef must be larger than 1, and has effect on both multipliers & probability values.
  minBetAmount          Float?
  maxBetAmount          Float?
  companyShare          Float
}

enum PlinkoGameStatus {
  NOT_DROPPED_YET
  DROPPING
  FINISHED
}

model PlinkoGame {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  initialBet  Float
  token       TokensEnum       @default(USDC)
  chainId     Int
  chain       Chain            @relation(fields: [chainId], references: [id])
  ballsCount  Int              @default(1)
  mode        GameModesEnum    @default(EASY)
  rowsCount   Int              @default(8)
  prize       Float            @default(0.0)
  profit      Float?
  status      PlinkoGameStatus @default(NOT_DROPPED_YET)
  finishedAt  DateTime?
  plinkoBalls PlinkoBalls[]
}

model PlinkoBalls {
  id        BigInt   @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  game             PlinkoGame @relation(fields: [gameId], references: [id])
  gameId           Int
  user             User       @relation(fields: [userId], references: [id])
  userId           Int
  bucketIndex      Int
  scoredMultiplier Float
  dropSpecs        Json
}

model PlinkoRules {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  rows                  Int     @unique
  multipliers           Float[]
  probabilities         Float[]
  difficultyMultipliers Float[]
  minBetAmount          Float?
  maxBetAmount          Float?
  companyShare          Float
  verticalSpeedFactor   Float
  horizontalSpeedFactor Float
  gravity               Float
  friction              Float
}

model Block {
  id        BigInt   @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  number BigInt
  hash   String
  status BlockStatus

  chainId Int
  chain   Chain           @relation(fields: [chainId], references: [id])
  logs    BlockchainLog[]
}

model BlockchainLog {
  id        BigInt   @id @default(autoincrement())
  createdAt DateTime @default(now())

  from   String
  to     String
  amount Float
  token  TokensEnum @default(USDT)

  successful Boolean @default(true)
  trxHash    String?
  trxNonce   BigInt?
  trxIndex   BigInt?
  gasPrice   BigInt?
  gasLimit   BigInt?

  chainId       Int
  chain         Chain        @relation(fields: [chainId], references: [id])
  blockId       BigInt?
  block         Block?       @relation(fields: [blockId], references: [id])
  transactionId BigInt?      @unique
  transaction   Transaction? @relation(fields: [transactionId], references: [id])
}

model Referral {
  createdAt DateTime @default(now())

  referrer   User @relation("ReferrerUser", fields: [referrerId], references: [id])
  referrerId Int
  user       User @relation("RefereeUser", fields: [userId], references: [id])
  userId     Int

  layer Int @default(0)

  @@id([referrerId, userId])
}
