// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lastLoginAt DateTime @default(now())

  email            String?         @unique @db.VarChar(256)
  name             String?         @db.VarChar(256)
  admin            Boolean         @default(false)
  wallet           Wallet?
  profile          UserProfile?
  dreamMineRecords DreamMineGame[]
}

model UserProfile {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User    @relation(fields: [userId], references: [id])
  userId Int     @unique
  avatar String? @db.VarChar(512)
}

enum TokensEnum {
  SOL
  ETH
  USDC
  USDT
  WUSDC
}

enum TransactionStatusEnum {
  SUCCESSFUL
  FAILED
  REVERTED
  PENDING
}

model Wallet {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner                User          @relation(fields: [ownerId], references: [id])
  ownerId              Int           @unique
  address              String        @unique @db.VarChar(256)
  withdrawTransactions Transaction[] @relation("TrxSource")
  despositTransactions Transaction[] @relation("TrxDestination")
}

model Chain {
  id        Int      @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name               String          @db.VarChar(64)
  providerUrl        String          @db.VarChar(256)
  lastProcessedBlock BigInt?
  blockProcessRange  Int             @default(5)
  transactions       Transaction[]
  dreamMineGames     DreamMineGame[]
  blockchainLogs     BlockchainLog[]
  contracts          Contract[]
}

model Contract {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  address  String      @unique @db.VarChar(256)
  token    TokensEnum?
  title    String?     @db.VarChar(128)
  chainId  Int
  chain    Chain       @relation(fields: [chainId], references: [id])
  decimals Int?
}

model Transaction {
  id        BigInt   @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  source        Wallet?               @relation("TrxSource", fields: [sourceId], references: [id])
  sourceId      Int?
  destination   Wallet?               @relation("TrxDestination", fields: [destinationId], references: [id])
  destinationId Int?
  token         TokensEnum            @default(USDC)
  amount        Float
  chainId       Int
  chain         Chain                 @relation(fields: [chainId], references: [id])
  status        TransactionStatusEnum @default(PENDING)
  remarks       Json?
}

enum GameStatusEnum {
  WON
  FLAWLESS_WIN
  LOST
  ONGOING
  NOT_STARTED
}

enum GameModesEnum {
  EASY
  MEDIUM
  HARD
}

model DreamMineGame {
  id        Int      @id @default(autoincrement()) // TODO: What to do with id type? Int or BigInt?
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  initialBet Float
  token      TokensEnum     @default(USDC)
  chainId    Int
  chain      Chain          @relation(fields: [chainId], references: [id])
  mode       GameModesEnum  @default(EASY)
  rowsCount  Int            @default(8)
  currentRow Int            @default(0)
  stake      Float          @default(0.0)
  golds      Int[]
  lastChoice Int?
  status     GameStatusEnum @default(NOT_STARTED)
  finishedAt DateTime?
}

model DreamMineRules {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  rowCoefficients        Float[] // Stake multiplier, must be > 1
  rowProbabilities       Float[] // as Percentage, in range: (0, 100)
  difficultyCoefficients Float[] // easy coefficient is 1 always. This array contains two coefficients [hard, medium] for medium and hard difficulties. (or only hard if only one value)
  // this coef must be larger than 1, and has effect on both rowCoefficients & probability values.
  minRows                Int     @default(8)
  maxRows                Int     @default(12)
  minBetAmount           Float?
  maxBetAmount           Float?
}

model BlockchainLog {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  from    String
  to      String
  amount  Float
  token   TokensEnum @default(USDT)
  chainId Int
  chain   Chain      @relation(fields: [chainId], references: [id])
}
